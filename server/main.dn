
component provides App requires io.Output out, net.TCPSocket, net.TCPServerSocket, 
	http.HTTPUtil httpUtil, server.Server server, distributor.LearningDistributor {

	// processing incoming requests and handing them over to Server
	void handleRequest(TCPSocket client) {
		HTTPMessage msg = httpUtil.readHTTPRequest(client)
		server.process(msg)
	}

	int App:main(AppParam params[]) {
		// instantiating variables
		TCPServerSocket host = new TCPServerSocket()
		int server_port = 8080
		server = new Server()

	
		// binding server socket
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, server_port)) {
			out.println("Error: failed to bind master socket")
			return 1
		}

		out.println("Server is up and running...")

		LearningDistributor distributor = new LearningDistributor()
		distributor.setupLearning()

		// handling incoming requests
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) {
				out.println("Request is being handle")

				int chosenConfig = distributor.distributeByLearning()

				// todo collect response time


				asynch::handleRequest(client)

				distributor.updateReward(chosenConfig, 1.0) // todo change reward

			}
			out.println("...")

		}

		return 0
	}
}
