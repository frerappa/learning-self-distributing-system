const char debugMSG[]	  = "[@LearningDistributor]"

const char LOCAL[]      = "local"

component provides distributor.LearningDistributor requires Distributor distributor, io.Output out, io.File, data.StringUtil strUtil, data.IntUtil iu, data.DecUtil du, io.Input in, learning.UCB, learning.EpsilonGreedy {

	int currentConfigIndex = 0
	String configs[] = null
	UCB learning = null
	// EpsilonGreedy learning = null

	bool write = false

	LearningDistributor:LearningDistributor(opt bool outputToFile) {
		distributor.start()
		configs = distributor.getConfigs()
		write = outputToFile
	}

	int distributeByLearning() {
		int index = learning.chooseCompositionIndex()
		if (currentConfigIndex != index) {
			String chosenConfig = configs[index]
			out.println("ChosenConfig: $(chosenConfig.string)")
			distributor.setConfig(chosenConfig.string)
		}
		currentConfigIndex = index
		return index
	}

	void updateReward(int config, dec reward) {
		learning.update(config, reward)
	}

	dec averageResponseTime(Metric m) {
		out.println("IV $(iu.intToString(m.value)) / $(iu.intToString(m.counter)) ")
		dec value =  m.value
		dec counter = m.counter
		return value / counter 
	}

	void LearningDistributor:run() {
		learning = new UCB(configs.arrayLength)
		PerceptionData perception = null
		bool found = false

		while (1) {
			perception = distributor.getPerceptionData()
			for (int i = 0; perception != null && i < perception.events.arrayLength; i++) {
				out.println(perception.events[i].type)
				if (perception.events[i].type == "CALL") {
					for (int j = 0; j < perception.metrics.arrayLength; j++) {
						if (perception.metrics[j].name == "response_time") {
							dec responseTime = averageResponseTime(perception.metrics[j])
							dec reward = 100 / responseTime

							updateReward(currentConfigIndex, reward)

							distributeByLearning()

							// if (write) {
								out.println(">RT $(du.decToString(responseTime))")
							// }

							found = true
							break
						}
					}
				}
				if (found) {
					found = false
					break
				}
			}
		}
	}


}

