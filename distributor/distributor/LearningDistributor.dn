const char debugMSG[]	  = "[@LearningDistributor]"

const char LOCAL[]      = "local"

component provides distributor.LearningDistributor requires Distributor distributor, io.Output out, io.File, 
	data.StringUtil strUtil, data.IntUtil iu, time.Timer t, data.DecUtil du, io.Input in, learning.UCB, learning.EpsilonGreedy, learning.DistributedUCB,
	net.TCPSocket, net.TCPServerSocket, http.HTTPUtil httpUtil,
	net.http.HTTPRequest http {

	int currentConfigIndex = 0
	String configs[] = null

	int port = 3500

	bool write = false

	LearningDistributor:LearningDistributor(opt bool outputToFile) {
		distributor.start()
		configs = distributor.getConfigs()
		write = outputToFile
	}

	void changeConfiguration(int newConfigurationIndex) {
		if (currentConfigIndex != newConfigurationIndex) {
			String chosenConfig = configs[newConfigurationIndex]
			out.println("ChosenConfig: $(chosenConfig.string)")
			distributor.setConfig(chosenConfig.string)
		}
		currentConfigIndex = newConfigurationIndex
	}

	dec averageResponseTime(Metric m) {
		out.println("IV $(iu.intToString(m.value)) / $(iu.intToString(m.counter)) ")
		dec value =  m.value
		dec counter = m.counter
		return value / counter 
	}

	void sendResponse(HTTPMessage httpMessage, char response[]) {
		httpMessage.socket.send("HTTP/1.1 200 OK\r\n")
		httpMessage.socket.send("Server: $(HTTPUtil.SERVER_NAME)\r\n")
		httpMessage.socket.send("Content-Encoding: binary\r\n")
		httpMessage.socket.send("Content-Length: $(iu.intToString(response.arrayLength))\r\n")
		httpMessage.socket.send("Connection: close\r\n")
		httpMessage.socket.send("Content-Type: $(httpMessage.mimeType)\r\n")
		httpMessage.socket.send("\r\n")
		httpMessage.socket.send(response)
	}


	void LearningDistributor:run() {
		TCPServerSocket host = new TCPServerSocket()
	
		// binding server socket
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, port)) {
			out.println("Error: failed to bind master socket")
			return
		}
		PerceptionData perception = null

		while (1) {

			TCPSocket client = new TCPSocket()
			if (client.accept(host)) {
				out.println("ok")

				HTTPMessage message = httpUtil.readHTTPRequest(client)

				// GET /ucb/init
				if (strUtil.ifind(message.resource, "/ucb/init") != StringUtil.NOT_FOUND && (message.command == "GET")) {
					sendResponse(message, iu.intToString(configs.arrayLength))
				}

				// GET /ucb/perception-data
				if (strUtil.ifind(message.resource, "/ucb/perception-data") != StringUtil.NOT_FOUND && (message.command == "GET")) {
					perception = distributor.getPerceptionData()
					bool hasMetric = false
					for (int j = 0; j < perception.metrics.arrayLength; j++) {
						if (perception.metrics[j].name == "response_time") {
							hasMetric = true
							dec responseTime = averageResponseTime(perception.metrics[j])
							char response[] = new char[](
								iu.intToString(currentConfigIndex), 
								"|", 
								du.decToString(responseTime))

								sendResponse(message, response)
						}
					}	
					if (!hasMetric) {
						sendResponse(message, "NOT FOUND")
					}
				}

				// POST /ucb/composition
				if (strUtil.ifind(message.resource, "/ucb/composition") != StringUtil.NOT_FOUND && (message.command == "POST")) {
					changeConfiguration(iu.intFromString(message.postData))
					sendResponse(message, "OK")
				}
			}
		}
	}
}

