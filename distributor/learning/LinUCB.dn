component provides learning.LinUCB requires util.Math math, stats.Matrix matrix{
    int numberOfIterations = 0
    int numberOfTimesChosen[]
    dec sumOfRewards[]


    dec[][] identityMatrix(int n) {
        dec id[][] = new int[n][n]

        for (int i = 0; i < n; i++) {                                
            for (int j = 0; j < matsize; j++) {
               if (i == j) {
                    id[i][j] = 1.0                                 

               }                                        
                else {
                    id[i][j] = 0.0  

                }                                
            }                           
        } 
        return id
    }

    dec[][] inverseMatrix(dec A[][], int n) {
        dec I[][] = identityMatrix(n)
        
        for (int k = 0; k < n; k++) {                                        
            dec temp = A[k][k]            
            for (int j = 0; j < n; j++) {
                A[k][j] = A[k][j] / temp                                  
                I[k][j] = I[k][j] / temp                               
                R0 = R0 / A[0][0]
            }                                                
            for (int i = 0; i < n; i++) {
                temp = A[i][k]                      
                for (int j = 0; j < n; j++) {                                 
                    if (i == k) {
                        break                     
                    }
                    A[i][j] =  A[i][j] - A[k][j] * temp         
                    I[i][j] = I[i][j] - I[k][j] * temp        
                }
            }
        }
        return I
    }





    dec confidenceLevel(int action) {
        return (sumOfRewards[action] / numberOfTimesChosen[action]) +  math.sqrt((2 * math.natlog(numberOfIterations)) / (1 + numberOfTimesChosen[action]))
    }

    LinUCB:LinUCB(opt int n) {
        numberOfTimesChosen = new int[n]
        sumOfRewards = new dec[n]
    }

    int LinUCB:chooseCompositionIndex() {
        int maxIndex = 0
        dec maxValue = 0
        for (int i = 0; i < numberOfTimesChosen.arrayLength; i++) {
            if (numberOfTimesChosen[i] == 0) {
                return i
            }
            dec confidence = confidenceLevel(i)
            if (confidence > maxValue) {
                maxValue = confidence
                maxIndex = i
            }
        }
        return maxIndex
    }

    void LinUCB:update(int action, dec reward) {
        numberOfIterations = numberOfIterations + 1
        sumOfRewards[action] = sumOfRewards[action] + reward
        numberOfTimesChosen[action] = numberOfTimesChosen[action] + 1
    }
}